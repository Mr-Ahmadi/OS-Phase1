# OS Project Phase 1: XV6 Modifications

## Overview
Phase 1 of the Operating Systems Principles course focuses on exploring and extending the MIT xv6 RISC‑V teaching operating system. In this phase you will:

- Familiarize yourself with the xv6 codebase and build process
- Customize the user shell (prompt and new commands)
- Implement a simple kernel logging framework
- Add a new system call and a user program to test it

## Repository Structure
```
├── sh/                   # Shell source (modified xv6 sh.c)
├── kernel/               # xv6 kernel sources
│   ├── custom_logger.c   # Simple logger implementation
│   ├── custom_logger.h
│   ├── syscall.h         # New SYS_trigger definition
│   ├── syscall.c         # Syscall table update
│   └── sysproc.c         # Kernel handler `sys_trigger`
├── user/                 # User programs
│   └── trigger_test.c    # Test program for `trigger` syscall
└── Makefile              # Build & run configuration (xv6-riscv)
```

## Prerequisites
- GNU toolchain for RISC‑V (gcc, binutils)
- QEMU RISC‑V emulator
- Docker (recommended for consistent environment)
- Git

## Setup & Build
1. **Clone the repository**
   ```bash
   git clone https://github.com/<your‑org>/xv6‑phase1.git
   cd xv6‑phase1/xv6-riscv
   ```
2. **Run via Docker**
   ```bash
   docker run -it --rm -v $(pwd):/home/xv6/xv6-riscv wtakuo/xv6-env
   ```
3. **Build and launch xv6**
   ```bash
   make qemu
   ```

## Implemented Features

### 1. Custom Shell Prompt
- Modified `getcmd` in `sh.c` to replace the default `$ ` prompt with `<sina‑kiarash> ` (group member identifiers).

### 2. New Shell Command: `!`
- In `runcmd` (also `sh.c`), detect commands starting with `! <message>`:
  - Print `<message>` to the console.
  - If `<message>` contains the substring `"os"`, print `os`.
  - If `<message>` length exceeds 50 characters, print `Message too long`.

### 3. Kernel Logging Framework
- Created `kernel/custom_logger.c` and `.h`:
  - `void log_message(int level, const char *message);`
  - Supports three levels: `INFO`, `WARN`, `ERROR`.
- At boot (in `main.c`), log one message at each level:
  ```c
  log_message(INFO,  "Welcome to AUT MCS Principles of Operating Systems Course...");
  log_message(WARN,  "This is a test warning message for the custom logger");
  log_message(ERROR, "This is a test error message for the custom logger");
  ```

### 4. New System Call: `trigger`
- Defined `SYS_trigger` in `kernel/syscall.h`.
- Implemented kernel handler `sys_trigger` in `kernel/sysproc.c`, which calls:
  ```c
  log_message(INFO, "This is a log to test a new xv6 system call");
  ```
- Updated syscall dispatch table (`kernel/syscall.c`) and user stub (`usys.S`).

### 5. User Program: `trigger_test`
- In `user/trigger_test.c`, invoke the `trigger()` system call to verify log emission.
- Run inside xv6 shell:
  ```sh
  $ trigger_test
  ```

## Usage Examples
```sh
# Custom prompt appears
<ali-fereshteh>

# Test the '!' command
<ali-fereshteh> ! Hello xv6 world
Hello xv6 world

# Message containing "os"
<ali-fereshteh> ! learning os concepts
os

# Message exceeding 50 chars
<ali-fereshteh> ! This is a very long message that will definitely exceed the fifty character limit
Message too long

# Test the new system call
<ali-fereshteh> trigger_test
```

---
*Phase 1 submitted: Ordibehesht 1403 (April 2025)*

